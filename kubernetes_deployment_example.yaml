---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-nifi-instance-config
data:
  NIFI_WEB_PROXY_HOST: <instert instance hostname>
  NIFI_WEB_HTTPS_PORT: "8443"
  NIFI_WEB_HTTPS_HOST: "0.0.0.0"
  NIFI_REMOTE_INPUT_HOST: <insert container name, used for remote communications>
  NIFI_JVM_HEAP_INIT: 8G
  NIFI_JVM_HEAP_MAX: 8G
  KEYSTORE_PATH: /opt/nifi/certs/<insert certificate name>.p12  # This is the path to the data, which is mounted from the nifi-certificates secret.
  KEYSTORE_TYPE: PKCS12
  TRUSTSTORE_PATH: /opt/nifi/certs/<insert truststore name>.jks  # This is the path to the data, which is mounted from the nifi-certificates secret.
  TRUSTSTORE_TYPE: JKS
  NIFI_SECURITY_USER_AUTHORIZER: single-user-authorizer
  NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER: single-user-provider
  AUTH: tls
---
apiVersion: v1
kind: Secret
metadata:
  name: my-nifi-instance-secret
data:
  KEYSTORE_PASSWORD: <insert base64 encoded password>
  NIFI_SENSITIVE_PROPS_KEY: <insert base64 encoded sensitive props key>
  SINGLE_USER_CREDENTIALS_PASSWORD: <insert base64 encoded admin password>
  SINGLE_USER_CREDENTIALS_USERNAME: <insert base64 encoded admin username>
  TRUSTSTORE_PASSWORD: <insert base64 encoded password>
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: nifi-certificates
data:
  <insert truststore name>.jks: >-
    <insert base64 encoded data>
  <insert certificate name>.p12: >-
    <insert base64 encoded data>
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nifi-instance
  labels:
    app: my-nifi-instance
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: my-nifi-instance
  template:
    metadata:
      labels:
        app: my-nifi-instance
    spec:
      hostname: my-nifi-instance
      securityContext:
            fsGroup: 1000
      volumes:
        - name: certs
          secret:
            secretName: nifi-certificates
        - name: data
          persistentVolumeClaim:
            claimName: my-nifi-instance-data

      containers:
        - name: my-nifi-instance
          image: apache/nifi:1.26.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8443
              name: https
            - containerPort: 10000
              name: remote
            - containerPort: 9000
              name: nifi-listen
          command:
            - sh
            - -c 
            - |
              #!/bin/sh -e
              # This is where you can do additional things that are not provided with the Official NiFi container. 
              # These can be additional prop_replace entries, sed commands or anything else that can be done as the container user.
              # There is no need to build a new container image, and upgrades are simplified. 
              
              scripts_dir='/opt/nifi/scripts'
              
              [ -f "${scripts_dir}/common.sh" ] && . "${scripts_dir}/common.sh"

              # prop_replace 'nifi.web.https.port' "${NIFI_WEB_HTTPS_PORT:-8443}"
              prop_replace 'nifi.content.claim.max.appendable.size' "1 MB"
              prop_replace 'nifi.content.repository.archive.enabled' "false"
              prop_replace 'nifi.provenance.repository.max.storage.time' "5 days"
              prop_replace 'nifi.provenance.repository.max.storage.size' "1 GB"
              # prop_replace 'nifi.sensitive.props.algorithm' "Your Algorithm if needed"
              # prop_add_or_replace 'nifi.sensitive.props.provider' "Your props provider if needed"
              
              # nifi.flow.configuration.file=./conf/flow.xml.gz
              mkdir /opt/nifi/nifi-current/flow
              prop_replace 'nifi.flow.configuration.file' "/opt/nifi/nifi-current/flow/flow.xml.gz"
              # nifi.flow.configuration.json.file=./conf/flow.json.gz
              prop_replace 'nifi.flow.configuration.json.file' "/opt/nifi/nifi-current/flow/flow.json.gz"
              # nifi.flow.configuration.archive.dir=./conf/archive/
              mkdir /opt/nifi/nifi-current/flow/archive
              prop_replace 'nifi.flow.configuration.archive.dir' "/opt/nifi/nifi-current/flow/archive/"

              mkdir /opt/nifi/nifi-current/flow/new
              echo "Copy new flow.xml.gz and flow.json.gz into /opt/nifi/nifi-current/flow/new to overwrite the existing flow on next boot."
              mv -fv /opt/nifi/nifi-current/flow/new/flow.xml.gz /opt/nifi/nifi-current/flow/flow.xml.gz
              mv -fv /opt/nifi/nifi-current/flow/new/flow.json.gz /opt/nifi/nifi-current/flow/flow.json.gz
              
              . "${scripts_dir}/start.sh"
          envFrom:
            - configMapRef:
                name: my-nifi-instance-config  # non-sensitive environement variables. See above. 
            - secretRef:
                name: my-nifi-instance-secret  # sensitive environment variables. Similar to config map, but using secrets interface. 
          volumeMounts:
            - mountPath: /opt/nifi/certs
              name: certs
            - mountPath: /opt/nifi/nifi-current/flow
              name: data
              subPath: flow
            - mountPath: /opt/nifi/nifi-current/content_repository
              name: data
              subPath: content_repository
            - mountPath: /opt/nifi/nifi-current/database_repository
              name: data
              subPath: database_repository
            - mountPath: /opt/nifi/nifi-current/flowfile_repository
              name: data
              subPath: flowfile_repository
            - mountPath: /opt/nifi/nifi-current/provenance_repository
              name: data
              subPath: provenance_repository
            - mountPath: /opt/nifi/nifi-current/status_repository
              name: data
              subPath: status_repository
          resources:
            requests:
              memory: "10Gi"
              # cpu: 1
            limits:
              memory: "16Gi"
              # cpu: 2
---
apiVersion: v1
kind: Service
metadata:
  name: my-nifi-instance
spec:
  selector:
    app: my-nifi-instance
  ports:
  - name: nifi-web
    protocol: TCP
    port: 443
    targetPort: https
  - name: nifi-remote-http
    protocol: TCP
    port: 8443
    targetPort: https
  - name: nifi-remote-raw
    protocol: TCP
    port: 10000
    targetPort: remote
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-nifi-instance-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Gi
  storageClassName: gp2
